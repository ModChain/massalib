// Copyright (c) 2023 MASSA LABS <info@massa.net>

// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.5.1
// - protoc             v5.27.2
// source: massa/api/v1/public.proto

package massagrpc

import (
	context "context"

	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.64.0 or later.
const _ = grpc.SupportPackageIsVersion9

const (
	PublicService_ExecuteReadOnlyCall_FullMethodName       = "/massa.api.v1.PublicService/ExecuteReadOnlyCall"
	PublicService_GetBlocks_FullMethodName                 = "/massa.api.v1.PublicService/GetBlocks"
	PublicService_GetDatastoreEntries_FullMethodName       = "/massa.api.v1.PublicService/GetDatastoreEntries"
	PublicService_GetEndorsements_FullMethodName           = "/massa.api.v1.PublicService/GetEndorsements"
	PublicService_GetNextBlockBestParents_FullMethodName   = "/massa.api.v1.PublicService/GetNextBlockBestParents"
	PublicService_GetOperations_FullMethodName             = "/massa.api.v1.PublicService/GetOperations"
	PublicService_GetScExecutionEvents_FullMethodName      = "/massa.api.v1.PublicService/GetScExecutionEvents"
	PublicService_GetSelectorDraws_FullMethodName          = "/massa.api.v1.PublicService/GetSelectorDraws"
	PublicService_GetStakers_FullMethodName                = "/massa.api.v1.PublicService/GetStakers"
	PublicService_GetStatus_FullMethodName                 = "/massa.api.v1.PublicService/GetStatus"
	PublicService_GetTransactionsThroughput_FullMethodName = "/massa.api.v1.PublicService/GetTransactionsThroughput"
	PublicService_QueryState_FullMethodName                = "/massa.api.v1.PublicService/QueryState"
	PublicService_SearchBlocks_FullMethodName              = "/massa.api.v1.PublicService/SearchBlocks"
	PublicService_SearchEndorsements_FullMethodName        = "/massa.api.v1.PublicService/SearchEndorsements"
	PublicService_SearchOperations_FullMethodName          = "/massa.api.v1.PublicService/SearchOperations"
	PublicService_GetOperationABICallStacks_FullMethodName = "/massa.api.v1.PublicService/GetOperationABICallStacks"
	PublicService_GetSlotABICallStacks_FullMethodName      = "/massa.api.v1.PublicService/GetSlotABICallStacks"
	PublicService_GetSlotTransfers_FullMethodName          = "/massa.api.v1.PublicService/GetSlotTransfers"
	PublicService_NewBlocks_FullMethodName                 = "/massa.api.v1.PublicService/NewBlocks"
	PublicService_NewEndorsements_FullMethodName           = "/massa.api.v1.PublicService/NewEndorsements"
	PublicService_NewFilledBlocks_FullMethodName           = "/massa.api.v1.PublicService/NewFilledBlocks"
	PublicService_NewOperations_FullMethodName             = "/massa.api.v1.PublicService/NewOperations"
	PublicService_NewSlotExecutionOutputs_FullMethodName   = "/massa.api.v1.PublicService/NewSlotExecutionOutputs"
	PublicService_NewSlotABICallStacks_FullMethodName      = "/massa.api.v1.PublicService/NewSlotABICallStacks"
	PublicService_NewSlotTransfers_FullMethodName          = "/massa.api.v1.PublicService/NewSlotTransfers"
	PublicService_SendBlocks_FullMethodName                = "/massa.api.v1.PublicService/SendBlocks"
	PublicService_SendEndorsements_FullMethodName          = "/massa.api.v1.PublicService/SendEndorsements"
	PublicService_SendOperations_FullMethodName            = "/massa.api.v1.PublicService/SendOperations"
	PublicService_TransactionsThroughput_FullMethodName    = "/massa.api.v1.PublicService/TransactionsThroughput"
)

// PublicServiceClient is the client API for PublicService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
//
// Massa public gRPC service
type PublicServiceClient interface {
	// Execute read only call
	ExecuteReadOnlyCall(ctx context.Context, in *ExecuteReadOnlyCallRequest, opts ...grpc.CallOption) (*ExecuteReadOnlyCallResponse, error)
	// Get blocks by ids
	GetBlocks(ctx context.Context, in *GetBlocksRequest, opts ...grpc.CallOption) (*GetBlocksResponse, error)
	// Get datastore entries
	GetDatastoreEntries(ctx context.Context, in *GetDatastoreEntriesRequest, opts ...grpc.CallOption) (*GetDatastoreEntriesResponse, error)
	// Get endorsements by ids
	GetEndorsements(ctx context.Context, in *GetEndorsementsRequest, opts ...grpc.CallOption) (*GetEndorsementsResponse, error)
	// Get next block best parents
	GetNextBlockBestParents(ctx context.Context, in *GetNextBlockBestParentsRequest, opts ...grpc.CallOption) (*GetNextBlockBestParentsResponse, error)
	// Get operations by ids
	GetOperations(ctx context.Context, in *GetOperationsRequest, opts ...grpc.CallOption) (*GetOperationsResponse, error)
	// Get smart contracts execution events
	GetScExecutionEvents(ctx context.Context, in *GetScExecutionEventsRequest, opts ...grpc.CallOption) (*GetScExecutionEventsResponse, error)
	// Get selector draws
	GetSelectorDraws(ctx context.Context, in *GetSelectorDrawsRequest, opts ...grpc.CallOption) (*GetSelectorDrawsResponse, error)
	// Get stakers
	GetStakers(ctx context.Context, in *GetStakersRequest, opts ...grpc.CallOption) (*GetStakersResponse, error)
	// Get status
	GetStatus(ctx context.Context, in *GetStatusRequest, opts ...grpc.CallOption) (*GetStatusResponse, error)
	// Get transactions throughput
	GetTransactionsThroughput(ctx context.Context, in *GetTransactionsThroughputRequest, opts ...grpc.CallOption) (*GetTransactionsThroughputResponse, error)
	// Query state
	QueryState(ctx context.Context, in *QueryStateRequest, opts ...grpc.CallOption) (*QueryStateResponse, error)
	// Search blocks
	SearchBlocks(ctx context.Context, in *SearchBlocksRequest, opts ...grpc.CallOption) (*SearchBlocksResponse, error)
	// Search endorsements
	SearchEndorsements(ctx context.Context, in *SearchEndorsementsRequest, opts ...grpc.CallOption) (*SearchEndorsementsResponse, error)
	// Search operations
	SearchOperations(ctx context.Context, in *SearchOperationsRequest, opts ...grpc.CallOption) (*SearchOperationsResponse, error)
	// Get ABI call stack of an operation
	GetOperationABICallStacks(ctx context.Context, in *GetOperationABICallStacksRequest, opts ...grpc.CallOption) (*GetOperationABICallStacksResponse, error)
	// Get ABI call stack of all asynchronous executions and all operations for a
	// given slot
	GetSlotABICallStacks(ctx context.Context, in *GetSlotABICallStacksRequest, opts ...grpc.CallOption) (*GetSlotABICallStacksResponse, error)
	// Get all the transfers of MAS for a given slot
	GetSlotTransfers(ctx context.Context, in *GetSlotTransfersRequest, opts ...grpc.CallOption) (*GetSlotTransfersResponse, error)
	// New received and produced blocks
	NewBlocks(ctx context.Context, opts ...grpc.CallOption) (grpc.BidiStreamingClient[NewBlocksRequest, NewBlocksResponse], error)
	// New received and produced endorsements
	NewEndorsements(ctx context.Context, opts ...grpc.CallOption) (grpc.BidiStreamingClient[NewEndorsementsRequest, NewEndorsementsResponse], error)
	// New received and produced blocks with operations
	NewFilledBlocks(ctx context.Context, opts ...grpc.CallOption) (grpc.BidiStreamingClient[NewFilledBlocksRequest, NewFilledBlocksResponse], error)
	// New received and produced operations
	NewOperations(ctx context.Context, opts ...grpc.CallOption) (grpc.BidiStreamingClient[NewOperationsRequest, NewOperationsResponse], error)
	// New received and slot execution events
	NewSlotExecutionOutputs(ctx context.Context, opts ...grpc.CallOption) (grpc.BidiStreamingClient[NewSlotExecutionOutputsRequest, NewSlotExecutionOutputsResponse], error)
	// Call stack for each slot executed
	NewSlotABICallStacks(ctx context.Context, opts ...grpc.CallOption) (grpc.BidiStreamingClient[NewSlotABICallStacksRequest, NewSlotABICallStacksResponse], error)
	// Transfer list for each slot executed
	NewSlotTransfers(ctx context.Context, opts ...grpc.CallOption) (grpc.BidiStreamingClient[NewSlotTransfersRequest, NewSlotTransfersResponse], error)
	// Send blocks
	SendBlocks(ctx context.Context, opts ...grpc.CallOption) (grpc.BidiStreamingClient[SendBlocksRequest, SendBlocksResponse], error)
	// Send endorsements
	SendEndorsements(ctx context.Context, opts ...grpc.CallOption) (grpc.BidiStreamingClient[SendEndorsementsRequest, SendEndorsementsResponse], error)
	// Send operations
	SendOperations(ctx context.Context, opts ...grpc.CallOption) (grpc.BidiStreamingClient[SendOperationsRequest, SendOperationsResponse], error)
	// Transactions throughput
	TransactionsThroughput(ctx context.Context, opts ...grpc.CallOption) (grpc.BidiStreamingClient[TransactionsThroughputRequest, TransactionsThroughputResponse], error)
}

type publicServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewPublicServiceClient(cc grpc.ClientConnInterface) PublicServiceClient {
	return &publicServiceClient{cc}
}

func (c *publicServiceClient) ExecuteReadOnlyCall(ctx context.Context, in *ExecuteReadOnlyCallRequest, opts ...grpc.CallOption) (*ExecuteReadOnlyCallResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(ExecuteReadOnlyCallResponse)
	err := c.cc.Invoke(ctx, PublicService_ExecuteReadOnlyCall_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *publicServiceClient) GetBlocks(ctx context.Context, in *GetBlocksRequest, opts ...grpc.CallOption) (*GetBlocksResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GetBlocksResponse)
	err := c.cc.Invoke(ctx, PublicService_GetBlocks_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *publicServiceClient) GetDatastoreEntries(ctx context.Context, in *GetDatastoreEntriesRequest, opts ...grpc.CallOption) (*GetDatastoreEntriesResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GetDatastoreEntriesResponse)
	err := c.cc.Invoke(ctx, PublicService_GetDatastoreEntries_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *publicServiceClient) GetEndorsements(ctx context.Context, in *GetEndorsementsRequest, opts ...grpc.CallOption) (*GetEndorsementsResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GetEndorsementsResponse)
	err := c.cc.Invoke(ctx, PublicService_GetEndorsements_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *publicServiceClient) GetNextBlockBestParents(ctx context.Context, in *GetNextBlockBestParentsRequest, opts ...grpc.CallOption) (*GetNextBlockBestParentsResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GetNextBlockBestParentsResponse)
	err := c.cc.Invoke(ctx, PublicService_GetNextBlockBestParents_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *publicServiceClient) GetOperations(ctx context.Context, in *GetOperationsRequest, opts ...grpc.CallOption) (*GetOperationsResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GetOperationsResponse)
	err := c.cc.Invoke(ctx, PublicService_GetOperations_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *publicServiceClient) GetScExecutionEvents(ctx context.Context, in *GetScExecutionEventsRequest, opts ...grpc.CallOption) (*GetScExecutionEventsResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GetScExecutionEventsResponse)
	err := c.cc.Invoke(ctx, PublicService_GetScExecutionEvents_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *publicServiceClient) GetSelectorDraws(ctx context.Context, in *GetSelectorDrawsRequest, opts ...grpc.CallOption) (*GetSelectorDrawsResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GetSelectorDrawsResponse)
	err := c.cc.Invoke(ctx, PublicService_GetSelectorDraws_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *publicServiceClient) GetStakers(ctx context.Context, in *GetStakersRequest, opts ...grpc.CallOption) (*GetStakersResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GetStakersResponse)
	err := c.cc.Invoke(ctx, PublicService_GetStakers_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *publicServiceClient) GetStatus(ctx context.Context, in *GetStatusRequest, opts ...grpc.CallOption) (*GetStatusResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GetStatusResponse)
	err := c.cc.Invoke(ctx, PublicService_GetStatus_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *publicServiceClient) GetTransactionsThroughput(ctx context.Context, in *GetTransactionsThroughputRequest, opts ...grpc.CallOption) (*GetTransactionsThroughputResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GetTransactionsThroughputResponse)
	err := c.cc.Invoke(ctx, PublicService_GetTransactionsThroughput_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *publicServiceClient) QueryState(ctx context.Context, in *QueryStateRequest, opts ...grpc.CallOption) (*QueryStateResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(QueryStateResponse)
	err := c.cc.Invoke(ctx, PublicService_QueryState_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *publicServiceClient) SearchBlocks(ctx context.Context, in *SearchBlocksRequest, opts ...grpc.CallOption) (*SearchBlocksResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(SearchBlocksResponse)
	err := c.cc.Invoke(ctx, PublicService_SearchBlocks_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *publicServiceClient) SearchEndorsements(ctx context.Context, in *SearchEndorsementsRequest, opts ...grpc.CallOption) (*SearchEndorsementsResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(SearchEndorsementsResponse)
	err := c.cc.Invoke(ctx, PublicService_SearchEndorsements_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *publicServiceClient) SearchOperations(ctx context.Context, in *SearchOperationsRequest, opts ...grpc.CallOption) (*SearchOperationsResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(SearchOperationsResponse)
	err := c.cc.Invoke(ctx, PublicService_SearchOperations_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *publicServiceClient) GetOperationABICallStacks(ctx context.Context, in *GetOperationABICallStacksRequest, opts ...grpc.CallOption) (*GetOperationABICallStacksResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GetOperationABICallStacksResponse)
	err := c.cc.Invoke(ctx, PublicService_GetOperationABICallStacks_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *publicServiceClient) GetSlotABICallStacks(ctx context.Context, in *GetSlotABICallStacksRequest, opts ...grpc.CallOption) (*GetSlotABICallStacksResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GetSlotABICallStacksResponse)
	err := c.cc.Invoke(ctx, PublicService_GetSlotABICallStacks_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *publicServiceClient) GetSlotTransfers(ctx context.Context, in *GetSlotTransfersRequest, opts ...grpc.CallOption) (*GetSlotTransfersResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GetSlotTransfersResponse)
	err := c.cc.Invoke(ctx, PublicService_GetSlotTransfers_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *publicServiceClient) NewBlocks(ctx context.Context, opts ...grpc.CallOption) (grpc.BidiStreamingClient[NewBlocksRequest, NewBlocksResponse], error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	stream, err := c.cc.NewStream(ctx, &PublicService_ServiceDesc.Streams[0], PublicService_NewBlocks_FullMethodName, cOpts...)
	if err != nil {
		return nil, err
	}
	x := &grpc.GenericClientStream[NewBlocksRequest, NewBlocksResponse]{ClientStream: stream}
	return x, nil
}

// This type alias is provided for backwards compatibility with existing code that references the prior non-generic stream type by name.
type PublicService_NewBlocksClient = grpc.BidiStreamingClient[NewBlocksRequest, NewBlocksResponse]

func (c *publicServiceClient) NewEndorsements(ctx context.Context, opts ...grpc.CallOption) (grpc.BidiStreamingClient[NewEndorsementsRequest, NewEndorsementsResponse], error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	stream, err := c.cc.NewStream(ctx, &PublicService_ServiceDesc.Streams[1], PublicService_NewEndorsements_FullMethodName, cOpts...)
	if err != nil {
		return nil, err
	}
	x := &grpc.GenericClientStream[NewEndorsementsRequest, NewEndorsementsResponse]{ClientStream: stream}
	return x, nil
}

// This type alias is provided for backwards compatibility with existing code that references the prior non-generic stream type by name.
type PublicService_NewEndorsementsClient = grpc.BidiStreamingClient[NewEndorsementsRequest, NewEndorsementsResponse]

func (c *publicServiceClient) NewFilledBlocks(ctx context.Context, opts ...grpc.CallOption) (grpc.BidiStreamingClient[NewFilledBlocksRequest, NewFilledBlocksResponse], error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	stream, err := c.cc.NewStream(ctx, &PublicService_ServiceDesc.Streams[2], PublicService_NewFilledBlocks_FullMethodName, cOpts...)
	if err != nil {
		return nil, err
	}
	x := &grpc.GenericClientStream[NewFilledBlocksRequest, NewFilledBlocksResponse]{ClientStream: stream}
	return x, nil
}

// This type alias is provided for backwards compatibility with existing code that references the prior non-generic stream type by name.
type PublicService_NewFilledBlocksClient = grpc.BidiStreamingClient[NewFilledBlocksRequest, NewFilledBlocksResponse]

func (c *publicServiceClient) NewOperations(ctx context.Context, opts ...grpc.CallOption) (grpc.BidiStreamingClient[NewOperationsRequest, NewOperationsResponse], error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	stream, err := c.cc.NewStream(ctx, &PublicService_ServiceDesc.Streams[3], PublicService_NewOperations_FullMethodName, cOpts...)
	if err != nil {
		return nil, err
	}
	x := &grpc.GenericClientStream[NewOperationsRequest, NewOperationsResponse]{ClientStream: stream}
	return x, nil
}

// This type alias is provided for backwards compatibility with existing code that references the prior non-generic stream type by name.
type PublicService_NewOperationsClient = grpc.BidiStreamingClient[NewOperationsRequest, NewOperationsResponse]

func (c *publicServiceClient) NewSlotExecutionOutputs(ctx context.Context, opts ...grpc.CallOption) (grpc.BidiStreamingClient[NewSlotExecutionOutputsRequest, NewSlotExecutionOutputsResponse], error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	stream, err := c.cc.NewStream(ctx, &PublicService_ServiceDesc.Streams[4], PublicService_NewSlotExecutionOutputs_FullMethodName, cOpts...)
	if err != nil {
		return nil, err
	}
	x := &grpc.GenericClientStream[NewSlotExecutionOutputsRequest, NewSlotExecutionOutputsResponse]{ClientStream: stream}
	return x, nil
}

// This type alias is provided for backwards compatibility with existing code that references the prior non-generic stream type by name.
type PublicService_NewSlotExecutionOutputsClient = grpc.BidiStreamingClient[NewSlotExecutionOutputsRequest, NewSlotExecutionOutputsResponse]

func (c *publicServiceClient) NewSlotABICallStacks(ctx context.Context, opts ...grpc.CallOption) (grpc.BidiStreamingClient[NewSlotABICallStacksRequest, NewSlotABICallStacksResponse], error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	stream, err := c.cc.NewStream(ctx, &PublicService_ServiceDesc.Streams[5], PublicService_NewSlotABICallStacks_FullMethodName, cOpts...)
	if err != nil {
		return nil, err
	}
	x := &grpc.GenericClientStream[NewSlotABICallStacksRequest, NewSlotABICallStacksResponse]{ClientStream: stream}
	return x, nil
}

// This type alias is provided for backwards compatibility with existing code that references the prior non-generic stream type by name.
type PublicService_NewSlotABICallStacksClient = grpc.BidiStreamingClient[NewSlotABICallStacksRequest, NewSlotABICallStacksResponse]

func (c *publicServiceClient) NewSlotTransfers(ctx context.Context, opts ...grpc.CallOption) (grpc.BidiStreamingClient[NewSlotTransfersRequest, NewSlotTransfersResponse], error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	stream, err := c.cc.NewStream(ctx, &PublicService_ServiceDesc.Streams[6], PublicService_NewSlotTransfers_FullMethodName, cOpts...)
	if err != nil {
		return nil, err
	}
	x := &grpc.GenericClientStream[NewSlotTransfersRequest, NewSlotTransfersResponse]{ClientStream: stream}
	return x, nil
}

// This type alias is provided for backwards compatibility with existing code that references the prior non-generic stream type by name.
type PublicService_NewSlotTransfersClient = grpc.BidiStreamingClient[NewSlotTransfersRequest, NewSlotTransfersResponse]

func (c *publicServiceClient) SendBlocks(ctx context.Context, opts ...grpc.CallOption) (grpc.BidiStreamingClient[SendBlocksRequest, SendBlocksResponse], error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	stream, err := c.cc.NewStream(ctx, &PublicService_ServiceDesc.Streams[7], PublicService_SendBlocks_FullMethodName, cOpts...)
	if err != nil {
		return nil, err
	}
	x := &grpc.GenericClientStream[SendBlocksRequest, SendBlocksResponse]{ClientStream: stream}
	return x, nil
}

// This type alias is provided for backwards compatibility with existing code that references the prior non-generic stream type by name.
type PublicService_SendBlocksClient = grpc.BidiStreamingClient[SendBlocksRequest, SendBlocksResponse]

func (c *publicServiceClient) SendEndorsements(ctx context.Context, opts ...grpc.CallOption) (grpc.BidiStreamingClient[SendEndorsementsRequest, SendEndorsementsResponse], error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	stream, err := c.cc.NewStream(ctx, &PublicService_ServiceDesc.Streams[8], PublicService_SendEndorsements_FullMethodName, cOpts...)
	if err != nil {
		return nil, err
	}
	x := &grpc.GenericClientStream[SendEndorsementsRequest, SendEndorsementsResponse]{ClientStream: stream}
	return x, nil
}

// This type alias is provided for backwards compatibility with existing code that references the prior non-generic stream type by name.
type PublicService_SendEndorsementsClient = grpc.BidiStreamingClient[SendEndorsementsRequest, SendEndorsementsResponse]

func (c *publicServiceClient) SendOperations(ctx context.Context, opts ...grpc.CallOption) (grpc.BidiStreamingClient[SendOperationsRequest, SendOperationsResponse], error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	stream, err := c.cc.NewStream(ctx, &PublicService_ServiceDesc.Streams[9], PublicService_SendOperations_FullMethodName, cOpts...)
	if err != nil {
		return nil, err
	}
	x := &grpc.GenericClientStream[SendOperationsRequest, SendOperationsResponse]{ClientStream: stream}
	return x, nil
}

// This type alias is provided for backwards compatibility with existing code that references the prior non-generic stream type by name.
type PublicService_SendOperationsClient = grpc.BidiStreamingClient[SendOperationsRequest, SendOperationsResponse]

func (c *publicServiceClient) TransactionsThroughput(ctx context.Context, opts ...grpc.CallOption) (grpc.BidiStreamingClient[TransactionsThroughputRequest, TransactionsThroughputResponse], error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	stream, err := c.cc.NewStream(ctx, &PublicService_ServiceDesc.Streams[10], PublicService_TransactionsThroughput_FullMethodName, cOpts...)
	if err != nil {
		return nil, err
	}
	x := &grpc.GenericClientStream[TransactionsThroughputRequest, TransactionsThroughputResponse]{ClientStream: stream}
	return x, nil
}

// This type alias is provided for backwards compatibility with existing code that references the prior non-generic stream type by name.
type PublicService_TransactionsThroughputClient = grpc.BidiStreamingClient[TransactionsThroughputRequest, TransactionsThroughputResponse]

// PublicServiceServer is the server API for PublicService service.
// All implementations must embed UnimplementedPublicServiceServer
// for forward compatibility.
//
// Massa public gRPC service
type PublicServiceServer interface {
	// Execute read only call
	ExecuteReadOnlyCall(context.Context, *ExecuteReadOnlyCallRequest) (*ExecuteReadOnlyCallResponse, error)
	// Get blocks by ids
	GetBlocks(context.Context, *GetBlocksRequest) (*GetBlocksResponse, error)
	// Get datastore entries
	GetDatastoreEntries(context.Context, *GetDatastoreEntriesRequest) (*GetDatastoreEntriesResponse, error)
	// Get endorsements by ids
	GetEndorsements(context.Context, *GetEndorsementsRequest) (*GetEndorsementsResponse, error)
	// Get next block best parents
	GetNextBlockBestParents(context.Context, *GetNextBlockBestParentsRequest) (*GetNextBlockBestParentsResponse, error)
	// Get operations by ids
	GetOperations(context.Context, *GetOperationsRequest) (*GetOperationsResponse, error)
	// Get smart contracts execution events
	GetScExecutionEvents(context.Context, *GetScExecutionEventsRequest) (*GetScExecutionEventsResponse, error)
	// Get selector draws
	GetSelectorDraws(context.Context, *GetSelectorDrawsRequest) (*GetSelectorDrawsResponse, error)
	// Get stakers
	GetStakers(context.Context, *GetStakersRequest) (*GetStakersResponse, error)
	// Get status
	GetStatus(context.Context, *GetStatusRequest) (*GetStatusResponse, error)
	// Get transactions throughput
	GetTransactionsThroughput(context.Context, *GetTransactionsThroughputRequest) (*GetTransactionsThroughputResponse, error)
	// Query state
	QueryState(context.Context, *QueryStateRequest) (*QueryStateResponse, error)
	// Search blocks
	SearchBlocks(context.Context, *SearchBlocksRequest) (*SearchBlocksResponse, error)
	// Search endorsements
	SearchEndorsements(context.Context, *SearchEndorsementsRequest) (*SearchEndorsementsResponse, error)
	// Search operations
	SearchOperations(context.Context, *SearchOperationsRequest) (*SearchOperationsResponse, error)
	// Get ABI call stack of an operation
	GetOperationABICallStacks(context.Context, *GetOperationABICallStacksRequest) (*GetOperationABICallStacksResponse, error)
	// Get ABI call stack of all asynchronous executions and all operations for a
	// given slot
	GetSlotABICallStacks(context.Context, *GetSlotABICallStacksRequest) (*GetSlotABICallStacksResponse, error)
	// Get all the transfers of MAS for a given slot
	GetSlotTransfers(context.Context, *GetSlotTransfersRequest) (*GetSlotTransfersResponse, error)
	// New received and produced blocks
	NewBlocks(grpc.BidiStreamingServer[NewBlocksRequest, NewBlocksResponse]) error
	// New received and produced endorsements
	NewEndorsements(grpc.BidiStreamingServer[NewEndorsementsRequest, NewEndorsementsResponse]) error
	// New received and produced blocks with operations
	NewFilledBlocks(grpc.BidiStreamingServer[NewFilledBlocksRequest, NewFilledBlocksResponse]) error
	// New received and produced operations
	NewOperations(grpc.BidiStreamingServer[NewOperationsRequest, NewOperationsResponse]) error
	// New received and slot execution events
	NewSlotExecutionOutputs(grpc.BidiStreamingServer[NewSlotExecutionOutputsRequest, NewSlotExecutionOutputsResponse]) error
	// Call stack for each slot executed
	NewSlotABICallStacks(grpc.BidiStreamingServer[NewSlotABICallStacksRequest, NewSlotABICallStacksResponse]) error
	// Transfer list for each slot executed
	NewSlotTransfers(grpc.BidiStreamingServer[NewSlotTransfersRequest, NewSlotTransfersResponse]) error
	// Send blocks
	SendBlocks(grpc.BidiStreamingServer[SendBlocksRequest, SendBlocksResponse]) error
	// Send endorsements
	SendEndorsements(grpc.BidiStreamingServer[SendEndorsementsRequest, SendEndorsementsResponse]) error
	// Send operations
	SendOperations(grpc.BidiStreamingServer[SendOperationsRequest, SendOperationsResponse]) error
	// Transactions throughput
	TransactionsThroughput(grpc.BidiStreamingServer[TransactionsThroughputRequest, TransactionsThroughputResponse]) error
	mustEmbedUnimplementedPublicServiceServer()
}

// UnimplementedPublicServiceServer must be embedded to have
// forward compatible implementations.
//
// NOTE: this should be embedded by value instead of pointer to avoid a nil
// pointer dereference when methods are called.
type UnimplementedPublicServiceServer struct{}

func (UnimplementedPublicServiceServer) ExecuteReadOnlyCall(context.Context, *ExecuteReadOnlyCallRequest) (*ExecuteReadOnlyCallResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ExecuteReadOnlyCall not implemented")
}
func (UnimplementedPublicServiceServer) GetBlocks(context.Context, *GetBlocksRequest) (*GetBlocksResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetBlocks not implemented")
}
func (UnimplementedPublicServiceServer) GetDatastoreEntries(context.Context, *GetDatastoreEntriesRequest) (*GetDatastoreEntriesResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetDatastoreEntries not implemented")
}
func (UnimplementedPublicServiceServer) GetEndorsements(context.Context, *GetEndorsementsRequest) (*GetEndorsementsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetEndorsements not implemented")
}
func (UnimplementedPublicServiceServer) GetNextBlockBestParents(context.Context, *GetNextBlockBestParentsRequest) (*GetNextBlockBestParentsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetNextBlockBestParents not implemented")
}
func (UnimplementedPublicServiceServer) GetOperations(context.Context, *GetOperationsRequest) (*GetOperationsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetOperations not implemented")
}
func (UnimplementedPublicServiceServer) GetScExecutionEvents(context.Context, *GetScExecutionEventsRequest) (*GetScExecutionEventsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetScExecutionEvents not implemented")
}
func (UnimplementedPublicServiceServer) GetSelectorDraws(context.Context, *GetSelectorDrawsRequest) (*GetSelectorDrawsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetSelectorDraws not implemented")
}
func (UnimplementedPublicServiceServer) GetStakers(context.Context, *GetStakersRequest) (*GetStakersResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetStakers not implemented")
}
func (UnimplementedPublicServiceServer) GetStatus(context.Context, *GetStatusRequest) (*GetStatusResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetStatus not implemented")
}
func (UnimplementedPublicServiceServer) GetTransactionsThroughput(context.Context, *GetTransactionsThroughputRequest) (*GetTransactionsThroughputResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetTransactionsThroughput not implemented")
}
func (UnimplementedPublicServiceServer) QueryState(context.Context, *QueryStateRequest) (*QueryStateResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method QueryState not implemented")
}
func (UnimplementedPublicServiceServer) SearchBlocks(context.Context, *SearchBlocksRequest) (*SearchBlocksResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SearchBlocks not implemented")
}
func (UnimplementedPublicServiceServer) SearchEndorsements(context.Context, *SearchEndorsementsRequest) (*SearchEndorsementsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SearchEndorsements not implemented")
}
func (UnimplementedPublicServiceServer) SearchOperations(context.Context, *SearchOperationsRequest) (*SearchOperationsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SearchOperations not implemented")
}
func (UnimplementedPublicServiceServer) GetOperationABICallStacks(context.Context, *GetOperationABICallStacksRequest) (*GetOperationABICallStacksResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetOperationABICallStacks not implemented")
}
func (UnimplementedPublicServiceServer) GetSlotABICallStacks(context.Context, *GetSlotABICallStacksRequest) (*GetSlotABICallStacksResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetSlotABICallStacks not implemented")
}
func (UnimplementedPublicServiceServer) GetSlotTransfers(context.Context, *GetSlotTransfersRequest) (*GetSlotTransfersResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetSlotTransfers not implemented")
}
func (UnimplementedPublicServiceServer) NewBlocks(grpc.BidiStreamingServer[NewBlocksRequest, NewBlocksResponse]) error {
	return status.Errorf(codes.Unimplemented, "method NewBlocks not implemented")
}
func (UnimplementedPublicServiceServer) NewEndorsements(grpc.BidiStreamingServer[NewEndorsementsRequest, NewEndorsementsResponse]) error {
	return status.Errorf(codes.Unimplemented, "method NewEndorsements not implemented")
}
func (UnimplementedPublicServiceServer) NewFilledBlocks(grpc.BidiStreamingServer[NewFilledBlocksRequest, NewFilledBlocksResponse]) error {
	return status.Errorf(codes.Unimplemented, "method NewFilledBlocks not implemented")
}
func (UnimplementedPublicServiceServer) NewOperations(grpc.BidiStreamingServer[NewOperationsRequest, NewOperationsResponse]) error {
	return status.Errorf(codes.Unimplemented, "method NewOperations not implemented")
}
func (UnimplementedPublicServiceServer) NewSlotExecutionOutputs(grpc.BidiStreamingServer[NewSlotExecutionOutputsRequest, NewSlotExecutionOutputsResponse]) error {
	return status.Errorf(codes.Unimplemented, "method NewSlotExecutionOutputs not implemented")
}
func (UnimplementedPublicServiceServer) NewSlotABICallStacks(grpc.BidiStreamingServer[NewSlotABICallStacksRequest, NewSlotABICallStacksResponse]) error {
	return status.Errorf(codes.Unimplemented, "method NewSlotABICallStacks not implemented")
}
func (UnimplementedPublicServiceServer) NewSlotTransfers(grpc.BidiStreamingServer[NewSlotTransfersRequest, NewSlotTransfersResponse]) error {
	return status.Errorf(codes.Unimplemented, "method NewSlotTransfers not implemented")
}
func (UnimplementedPublicServiceServer) SendBlocks(grpc.BidiStreamingServer[SendBlocksRequest, SendBlocksResponse]) error {
	return status.Errorf(codes.Unimplemented, "method SendBlocks not implemented")
}
func (UnimplementedPublicServiceServer) SendEndorsements(grpc.BidiStreamingServer[SendEndorsementsRequest, SendEndorsementsResponse]) error {
	return status.Errorf(codes.Unimplemented, "method SendEndorsements not implemented")
}
func (UnimplementedPublicServiceServer) SendOperations(grpc.BidiStreamingServer[SendOperationsRequest, SendOperationsResponse]) error {
	return status.Errorf(codes.Unimplemented, "method SendOperations not implemented")
}
func (UnimplementedPublicServiceServer) TransactionsThroughput(grpc.BidiStreamingServer[TransactionsThroughputRequest, TransactionsThroughputResponse]) error {
	return status.Errorf(codes.Unimplemented, "method TransactionsThroughput not implemented")
}
func (UnimplementedPublicServiceServer) mustEmbedUnimplementedPublicServiceServer() {}
func (UnimplementedPublicServiceServer) testEmbeddedByValue()                       {}

// UnsafePublicServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to PublicServiceServer will
// result in compilation errors.
type UnsafePublicServiceServer interface {
	mustEmbedUnimplementedPublicServiceServer()
}

func RegisterPublicServiceServer(s grpc.ServiceRegistrar, srv PublicServiceServer) {
	// If the following call pancis, it indicates UnimplementedPublicServiceServer was
	// embedded by pointer and is nil.  This will cause panics if an
	// unimplemented method is ever invoked, so we test this at initialization
	// time to prevent it from happening at runtime later due to I/O.
	if t, ok := srv.(interface{ testEmbeddedByValue() }); ok {
		t.testEmbeddedByValue()
	}
	s.RegisterService(&PublicService_ServiceDesc, srv)
}

func _PublicService_ExecuteReadOnlyCall_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ExecuteReadOnlyCallRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PublicServiceServer).ExecuteReadOnlyCall(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: PublicService_ExecuteReadOnlyCall_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PublicServiceServer).ExecuteReadOnlyCall(ctx, req.(*ExecuteReadOnlyCallRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _PublicService_GetBlocks_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetBlocksRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PublicServiceServer).GetBlocks(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: PublicService_GetBlocks_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PublicServiceServer).GetBlocks(ctx, req.(*GetBlocksRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _PublicService_GetDatastoreEntries_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetDatastoreEntriesRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PublicServiceServer).GetDatastoreEntries(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: PublicService_GetDatastoreEntries_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PublicServiceServer).GetDatastoreEntries(ctx, req.(*GetDatastoreEntriesRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _PublicService_GetEndorsements_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetEndorsementsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PublicServiceServer).GetEndorsements(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: PublicService_GetEndorsements_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PublicServiceServer).GetEndorsements(ctx, req.(*GetEndorsementsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _PublicService_GetNextBlockBestParents_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetNextBlockBestParentsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PublicServiceServer).GetNextBlockBestParents(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: PublicService_GetNextBlockBestParents_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PublicServiceServer).GetNextBlockBestParents(ctx, req.(*GetNextBlockBestParentsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _PublicService_GetOperations_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetOperationsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PublicServiceServer).GetOperations(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: PublicService_GetOperations_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PublicServiceServer).GetOperations(ctx, req.(*GetOperationsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _PublicService_GetScExecutionEvents_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetScExecutionEventsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PublicServiceServer).GetScExecutionEvents(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: PublicService_GetScExecutionEvents_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PublicServiceServer).GetScExecutionEvents(ctx, req.(*GetScExecutionEventsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _PublicService_GetSelectorDraws_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetSelectorDrawsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PublicServiceServer).GetSelectorDraws(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: PublicService_GetSelectorDraws_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PublicServiceServer).GetSelectorDraws(ctx, req.(*GetSelectorDrawsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _PublicService_GetStakers_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetStakersRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PublicServiceServer).GetStakers(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: PublicService_GetStakers_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PublicServiceServer).GetStakers(ctx, req.(*GetStakersRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _PublicService_GetStatus_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetStatusRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PublicServiceServer).GetStatus(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: PublicService_GetStatus_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PublicServiceServer).GetStatus(ctx, req.(*GetStatusRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _PublicService_GetTransactionsThroughput_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetTransactionsThroughputRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PublicServiceServer).GetTransactionsThroughput(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: PublicService_GetTransactionsThroughput_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PublicServiceServer).GetTransactionsThroughput(ctx, req.(*GetTransactionsThroughputRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _PublicService_QueryState_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryStateRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PublicServiceServer).QueryState(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: PublicService_QueryState_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PublicServiceServer).QueryState(ctx, req.(*QueryStateRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _PublicService_SearchBlocks_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SearchBlocksRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PublicServiceServer).SearchBlocks(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: PublicService_SearchBlocks_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PublicServiceServer).SearchBlocks(ctx, req.(*SearchBlocksRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _PublicService_SearchEndorsements_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SearchEndorsementsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PublicServiceServer).SearchEndorsements(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: PublicService_SearchEndorsements_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PublicServiceServer).SearchEndorsements(ctx, req.(*SearchEndorsementsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _PublicService_SearchOperations_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SearchOperationsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PublicServiceServer).SearchOperations(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: PublicService_SearchOperations_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PublicServiceServer).SearchOperations(ctx, req.(*SearchOperationsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _PublicService_GetOperationABICallStacks_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetOperationABICallStacksRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PublicServiceServer).GetOperationABICallStacks(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: PublicService_GetOperationABICallStacks_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PublicServiceServer).GetOperationABICallStacks(ctx, req.(*GetOperationABICallStacksRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _PublicService_GetSlotABICallStacks_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetSlotABICallStacksRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PublicServiceServer).GetSlotABICallStacks(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: PublicService_GetSlotABICallStacks_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PublicServiceServer).GetSlotABICallStacks(ctx, req.(*GetSlotABICallStacksRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _PublicService_GetSlotTransfers_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetSlotTransfersRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PublicServiceServer).GetSlotTransfers(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: PublicService_GetSlotTransfers_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PublicServiceServer).GetSlotTransfers(ctx, req.(*GetSlotTransfersRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _PublicService_NewBlocks_Handler(srv interface{}, stream grpc.ServerStream) error {
	return srv.(PublicServiceServer).NewBlocks(&grpc.GenericServerStream[NewBlocksRequest, NewBlocksResponse]{ServerStream: stream})
}

// This type alias is provided for backwards compatibility with existing code that references the prior non-generic stream type by name.
type PublicService_NewBlocksServer = grpc.BidiStreamingServer[NewBlocksRequest, NewBlocksResponse]

func _PublicService_NewEndorsements_Handler(srv interface{}, stream grpc.ServerStream) error {
	return srv.(PublicServiceServer).NewEndorsements(&grpc.GenericServerStream[NewEndorsementsRequest, NewEndorsementsResponse]{ServerStream: stream})
}

// This type alias is provided for backwards compatibility with existing code that references the prior non-generic stream type by name.
type PublicService_NewEndorsementsServer = grpc.BidiStreamingServer[NewEndorsementsRequest, NewEndorsementsResponse]

func _PublicService_NewFilledBlocks_Handler(srv interface{}, stream grpc.ServerStream) error {
	return srv.(PublicServiceServer).NewFilledBlocks(&grpc.GenericServerStream[NewFilledBlocksRequest, NewFilledBlocksResponse]{ServerStream: stream})
}

// This type alias is provided for backwards compatibility with existing code that references the prior non-generic stream type by name.
type PublicService_NewFilledBlocksServer = grpc.BidiStreamingServer[NewFilledBlocksRequest, NewFilledBlocksResponse]

func _PublicService_NewOperations_Handler(srv interface{}, stream grpc.ServerStream) error {
	return srv.(PublicServiceServer).NewOperations(&grpc.GenericServerStream[NewOperationsRequest, NewOperationsResponse]{ServerStream: stream})
}

// This type alias is provided for backwards compatibility with existing code that references the prior non-generic stream type by name.
type PublicService_NewOperationsServer = grpc.BidiStreamingServer[NewOperationsRequest, NewOperationsResponse]

func _PublicService_NewSlotExecutionOutputs_Handler(srv interface{}, stream grpc.ServerStream) error {
	return srv.(PublicServiceServer).NewSlotExecutionOutputs(&grpc.GenericServerStream[NewSlotExecutionOutputsRequest, NewSlotExecutionOutputsResponse]{ServerStream: stream})
}

// This type alias is provided for backwards compatibility with existing code that references the prior non-generic stream type by name.
type PublicService_NewSlotExecutionOutputsServer = grpc.BidiStreamingServer[NewSlotExecutionOutputsRequest, NewSlotExecutionOutputsResponse]

func _PublicService_NewSlotABICallStacks_Handler(srv interface{}, stream grpc.ServerStream) error {
	return srv.(PublicServiceServer).NewSlotABICallStacks(&grpc.GenericServerStream[NewSlotABICallStacksRequest, NewSlotABICallStacksResponse]{ServerStream: stream})
}

// This type alias is provided for backwards compatibility with existing code that references the prior non-generic stream type by name.
type PublicService_NewSlotABICallStacksServer = grpc.BidiStreamingServer[NewSlotABICallStacksRequest, NewSlotABICallStacksResponse]

func _PublicService_NewSlotTransfers_Handler(srv interface{}, stream grpc.ServerStream) error {
	return srv.(PublicServiceServer).NewSlotTransfers(&grpc.GenericServerStream[NewSlotTransfersRequest, NewSlotTransfersResponse]{ServerStream: stream})
}

// This type alias is provided for backwards compatibility with existing code that references the prior non-generic stream type by name.
type PublicService_NewSlotTransfersServer = grpc.BidiStreamingServer[NewSlotTransfersRequest, NewSlotTransfersResponse]

func _PublicService_SendBlocks_Handler(srv interface{}, stream grpc.ServerStream) error {
	return srv.(PublicServiceServer).SendBlocks(&grpc.GenericServerStream[SendBlocksRequest, SendBlocksResponse]{ServerStream: stream})
}

// This type alias is provided for backwards compatibility with existing code that references the prior non-generic stream type by name.
type PublicService_SendBlocksServer = grpc.BidiStreamingServer[SendBlocksRequest, SendBlocksResponse]

func _PublicService_SendEndorsements_Handler(srv interface{}, stream grpc.ServerStream) error {
	return srv.(PublicServiceServer).SendEndorsements(&grpc.GenericServerStream[SendEndorsementsRequest, SendEndorsementsResponse]{ServerStream: stream})
}

// This type alias is provided for backwards compatibility with existing code that references the prior non-generic stream type by name.
type PublicService_SendEndorsementsServer = grpc.BidiStreamingServer[SendEndorsementsRequest, SendEndorsementsResponse]

func _PublicService_SendOperations_Handler(srv interface{}, stream grpc.ServerStream) error {
	return srv.(PublicServiceServer).SendOperations(&grpc.GenericServerStream[SendOperationsRequest, SendOperationsResponse]{ServerStream: stream})
}

// This type alias is provided for backwards compatibility with existing code that references the prior non-generic stream type by name.
type PublicService_SendOperationsServer = grpc.BidiStreamingServer[SendOperationsRequest, SendOperationsResponse]

func _PublicService_TransactionsThroughput_Handler(srv interface{}, stream grpc.ServerStream) error {
	return srv.(PublicServiceServer).TransactionsThroughput(&grpc.GenericServerStream[TransactionsThroughputRequest, TransactionsThroughputResponse]{ServerStream: stream})
}

// This type alias is provided for backwards compatibility with existing code that references the prior non-generic stream type by name.
type PublicService_TransactionsThroughputServer = grpc.BidiStreamingServer[TransactionsThroughputRequest, TransactionsThroughputResponse]

// PublicService_ServiceDesc is the grpc.ServiceDesc for PublicService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var PublicService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "massa.api.v1.PublicService",
	HandlerType: (*PublicServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "ExecuteReadOnlyCall",
			Handler:    _PublicService_ExecuteReadOnlyCall_Handler,
		},
		{
			MethodName: "GetBlocks",
			Handler:    _PublicService_GetBlocks_Handler,
		},
		{
			MethodName: "GetDatastoreEntries",
			Handler:    _PublicService_GetDatastoreEntries_Handler,
		},
		{
			MethodName: "GetEndorsements",
			Handler:    _PublicService_GetEndorsements_Handler,
		},
		{
			MethodName: "GetNextBlockBestParents",
			Handler:    _PublicService_GetNextBlockBestParents_Handler,
		},
		{
			MethodName: "GetOperations",
			Handler:    _PublicService_GetOperations_Handler,
		},
		{
			MethodName: "GetScExecutionEvents",
			Handler:    _PublicService_GetScExecutionEvents_Handler,
		},
		{
			MethodName: "GetSelectorDraws",
			Handler:    _PublicService_GetSelectorDraws_Handler,
		},
		{
			MethodName: "GetStakers",
			Handler:    _PublicService_GetStakers_Handler,
		},
		{
			MethodName: "GetStatus",
			Handler:    _PublicService_GetStatus_Handler,
		},
		{
			MethodName: "GetTransactionsThroughput",
			Handler:    _PublicService_GetTransactionsThroughput_Handler,
		},
		{
			MethodName: "QueryState",
			Handler:    _PublicService_QueryState_Handler,
		},
		{
			MethodName: "SearchBlocks",
			Handler:    _PublicService_SearchBlocks_Handler,
		},
		{
			MethodName: "SearchEndorsements",
			Handler:    _PublicService_SearchEndorsements_Handler,
		},
		{
			MethodName: "SearchOperations",
			Handler:    _PublicService_SearchOperations_Handler,
		},
		{
			MethodName: "GetOperationABICallStacks",
			Handler:    _PublicService_GetOperationABICallStacks_Handler,
		},
		{
			MethodName: "GetSlotABICallStacks",
			Handler:    _PublicService_GetSlotABICallStacks_Handler,
		},
		{
			MethodName: "GetSlotTransfers",
			Handler:    _PublicService_GetSlotTransfers_Handler,
		},
	},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "NewBlocks",
			Handler:       _PublicService_NewBlocks_Handler,
			ServerStreams: true,
			ClientStreams: true,
		},
		{
			StreamName:    "NewEndorsements",
			Handler:       _PublicService_NewEndorsements_Handler,
			ServerStreams: true,
			ClientStreams: true,
		},
		{
			StreamName:    "NewFilledBlocks",
			Handler:       _PublicService_NewFilledBlocks_Handler,
			ServerStreams: true,
			ClientStreams: true,
		},
		{
			StreamName:    "NewOperations",
			Handler:       _PublicService_NewOperations_Handler,
			ServerStreams: true,
			ClientStreams: true,
		},
		{
			StreamName:    "NewSlotExecutionOutputs",
			Handler:       _PublicService_NewSlotExecutionOutputs_Handler,
			ServerStreams: true,
			ClientStreams: true,
		},
		{
			StreamName:    "NewSlotABICallStacks",
			Handler:       _PublicService_NewSlotABICallStacks_Handler,
			ServerStreams: true,
			ClientStreams: true,
		},
		{
			StreamName:    "NewSlotTransfers",
			Handler:       _PublicService_NewSlotTransfers_Handler,
			ServerStreams: true,
			ClientStreams: true,
		},
		{
			StreamName:    "SendBlocks",
			Handler:       _PublicService_SendBlocks_Handler,
			ServerStreams: true,
			ClientStreams: true,
		},
		{
			StreamName:    "SendEndorsements",
			Handler:       _PublicService_SendEndorsements_Handler,
			ServerStreams: true,
			ClientStreams: true,
		},
		{
			StreamName:    "SendOperations",
			Handler:       _PublicService_SendOperations_Handler,
			ServerStreams: true,
			ClientStreams: true,
		},
		{
			StreamName:    "TransactionsThroughput",
			Handler:       _PublicService_TransactionsThroughput_Handler,
			ServerStreams: true,
			ClientStreams: true,
		},
	},
	Metadata: "massa/api/v1/public.proto",
}
